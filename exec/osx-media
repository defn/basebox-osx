#!/usr/bin/env bash
#
# Preparation script for an OS X automated installation for use with VeeWee/Packer/Vagrant
# 
# What the script does, in more detail:
# 
# 1. Mounts the InstallESD.dmg using a shadow file, so the original DMG is left
#    unchanged.
# 2. Modifies the BaseSystem.dmg within in order to add an additional 'rc.cdrom.local'
#    file in /etc, which is a supported local configuration sourced in at boot time
#    by the installer environment. This file contains instructions to erase and format
#    'disk0', presumably the hard disk attached to the VM.
# 3. A 'veewee-config.pkg' installer package is built, which is added to the OS X
#    install by way of the OSInstall.collection file. This package creates the
#    'ubuntu' user, configures sshd and sudoers, and disables setup assistants.
# 4. veewee-config.pkg and the various support utilities are copied, and the disk
#    image is saved to the output path.
#
# Thanks:
# Idea and much of the implementation thanks to Pepijn Bruienne, who's also provided
# some process notes here: https://gist.github.com/4542016. The sample minstallconfig.xml,
# use of OSInstall.collection and readme documentation provided with Greg Neagle's
# createOSXInstallPkg tool also proved very helpful. (http://code.google.com/p/munki/wiki/InstallingOSX)
#
# User creation via package install method also credited to Greg, and made easy with Per
# Olofsson's CreateUserPkg (http://magervalp.github.io/CreateUserPkg)
#
# Antony Blakey for updates to support OS X 10.11:
# https://github.com/timsutton/osx-vm-templates/issues/40

usage() {
	cat <<EOF
Usage:
$(basename "$0") [-upiD] "/path/to/InstallESD.dmg" /path/to/output/directory
$(basename "$0") [-upiD] "/path/to/Install OS X [Name].app" /path/to/output/directory

Description:
Converts an OS X installer to a new image that contains components
used to perform an automated installation. The new image will be named
'OSX_InstallESD_[osversion].dmg.'

Optional switches:
  -u <user>
    Sets the username of the root user, defaults to 'ubuntu'.

  -p <password>
    Sets the password of the root user, defaults to 'ubuntu'.

  -i <path to image>
    Sets the path of the avatar image for the root user, defaulting to the vagrant icon.

  -D <flag>
    Sets the specified flag. Valid flags are:
      DISABLE_REMOTE_MANAGEMENT
      DISABLE_SCREEN_SHARING
      DISABLE_SIP

EOF
}

cleanup() {
  hdiutil detach -quiet -force "$MNT_ESD" || echo > /dev/null
  hdiutil detach -quiet -force "$MNT_BASE_SYSTEM" || echo > /dev/null
  rm -rf "$MNT_ESD" "$MNT_BASE_SYSTEM" "$BASE_SYSTEM_DMG_RW" "$SHADOW_FILE"
}

trap cleanup EXIT INT TERM

msg_status() {
  echo "-- $1"
}

msg_error() {
  echo "-- ERROR: $1"
}

render_template() {
  eval "echo \"$(cat "$1")\""
}

function main {
  set -ex

  if [ $# -eq 0 ]; then
    usage
    exit 1
  fi

  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  cd "$shome"
  SUPPORT_DIR="$shome/support"
# Parse the optional command line switches
  USER="ubuntu"
  PASSWORD="ubuntu"
  IMAGE_PATH="$SUPPORT_DIR/vagrant.jpg"

  # Flags
  DISABLE_REMOTE_MANAGEMENT=0
  DISABLE_SCREEN_SHARING=0
  DISABLE_SIP=0

  ESD="$1"; shift
  if [ ! -e "$ESD" ]; then
    msg_error "Input installer image $ESD could not be found! Exiting.."
    exit 1
  fi

  if [ -d "$ESD" ]; then
    # we might be an install .app
    if [ -e "$ESD/Contents/SharedSupport/InstallESD.dmg" ]; then
      ESD="$ESD/Contents/SharedSupport/InstallESD.dmg"
    else
      msg_error "Can't locate an InstallESD.dmg in this source location $ESD!"
    fi
  fi

  if [ -n "${1:-}" ]; then
    OUT_DIR="$1"; shift
  else
    OUT_DIR="$(pwd)"
  fi

  if [ ! -d "$OUT_DIR" ]; then
    msg_status "Destination dir $OUT_DIR doesn't exist, creating.."
    mkdir -p "$OUT_DIR"
  fi

  if [ -e "$ESD.shadow" ]; then
    msg_status "Removing old shadow file.."
    rm "$ESD.shadow"
  fi

  MNT_ESD=$(/usr/bin/mktemp -d /tmp/veewee-osx-esd.XXXX)
  SHADOW_FILE=$(/usr/bin/mktemp /tmp/veewee-osx-shadow.XXXX)
  rm "$SHADOW_FILE"
  msg_status "Attaching input OS X installer image with shadow file.."
  hdiutil attach "$ESD" -mountpoint "$MNT_ESD" -shadow "$SHADOW_FILE" -nobrowse -owners on 
  if [ $? -ne 0 ]; then
    [ ! -e "$ESD" ] && msg_error "Could not find $ESD in $(pwd)"
    msg_error "Could not mount $ESD on $MNT_ESD"
    exit 1
  fi

  msg_status "Mounting BaseSystem.."
  BASE_SYSTEM_DMG="$MNT_ESD/BaseSystem.dmg"
  MNT_BASE_SYSTEM=$(/usr/bin/mktemp -d /tmp/veewee-osx-basesystem.XXXX)
  [ ! -e "$BASE_SYSTEM_DMG" ] && msg_error "Could not find BaseSystem.dmg in $MNT_ESD"
  hdiutil attach "$BASE_SYSTEM_DMG" -mountpoint "$MNT_BASE_SYSTEM" -nobrowse -owners on
  if [ $? -ne 0 ]; then
    msg_error "Could not mount $BASE_SYSTEM_DMG on $MNT_BASE_SYSTEM"
    exit 1
  fi
  SYSVER_PLIST_PATH="$MNT_BASE_SYSTEM/System/Library/CoreServices/SystemVersion.plist"

  DMG_OS_VERS=$(/usr/libexec/PlistBuddy -c 'Print :ProductVersion' "$SYSVER_PLIST_PATH")
  DMG_OS_VERS_MAJOR=$(echo $DMG_OS_VERS | awk -F "." '{print $2}')
  DMG_OS_VERS_MINOR=$(echo $DMG_OS_VERS | awk -F "." '{print $3}')
  DMG_OS_BUILD=$(/usr/libexec/PlistBuddy -c 'Print :ProductBuildVersion' "$SYSVER_PLIST_PATH")
  msg_status "OS X version detected: 10.$DMG_OS_VERS_MAJOR.$DMG_OS_VERS_MINOR, build $DMG_OS_BUILD"

  OUTPUT_ISO="$OUT_DIR/OSX_InstallESD_${DMG_OS_VERS}_${DMG_OS_BUILD}.iso"

  # Build our post-installation pkg that will create a user and enable ssh
  msg_status "Making firstboot installer pkg.."

  # payload items
  mkdir -p "$SUPPORT_DIR/pkgroot/private/var/db/dslocal/nodes/Default/users"
  mkdir -p "$SUPPORT_DIR/pkgroot/private/var/db/shadow/hash"
  BASE64_IMAGE=$(openssl base64 -in "$IMAGE_PATH")
  # Replace USER and BASE64_IMAGE in the user.plist file with the actual user and image
  render_template "$SUPPORT_DIR/user.plist" > "$SUPPORT_DIR/pkgroot/private/var/db/dslocal/nodes/Default/users/$USER.plist"
  USER_GUID=$(/usr/libexec/PlistBuddy -c 'Print :generateduid:0' "$SUPPORT_DIR/user.plist")
  # Generate a shadowhash from the supplied password
  "$SUPPORT_DIR/generate_shadowhash" "$PASSWORD" > "$SUPPORT_DIR/pkgroot/private/var/db/shadow/hash/$USER_GUID"

  # postinstall script
  mkdir -p "$SUPPORT_DIR/tmp/Scripts"
  cat "$SUPPORT_DIR/pkg-postinstall" \
    | sed -e "s/__USER__PLACEHOLDER__/${USER}/" \
    | sed -e "s/__DISABLE_REMOTE_MANAGEMENT__/${DISABLE_REMOTE_MANAGEMENT}/" \
    | sed -e "s/__DISABLE_SCREEN_SHARING__/${DISABLE_SCREEN_SHARING}/" \
    | sed -e "s/__DISABLE_SIP__/${DISABLE_SIP}/" \
    > "$SUPPORT_DIR/tmp/Scripts/postinstall"
  chmod a+x "$SUPPORT_DIR/tmp/Scripts/postinstall"

  # build it
  BUILT_COMPONENT_PKG="$SUPPORT_DIR/tmp/veewee-config-component.pkg"
  BUILT_PKG="$SUPPORT_DIR/tmp/veewee-config.pkg"
  pkgbuild --quiet \
    --root "$SUPPORT_DIR/pkgroot" \
    --scripts "$SUPPORT_DIR/tmp/Scripts" \
    --identifier com.vagrantup.veewee-config \
    --version 0.1 \
    "$BUILT_COMPONENT_PKG"
  productbuild \
    --package "$BUILT_COMPONENT_PKG" \
    "$BUILT_PKG"
  rm -rf "$SUPPORT_DIR/pkgroot"

  # We'd previously mounted this to check versions
  hdiutil detach "$MNT_BASE_SYSTEM"

  BASE_SYSTEM_DMG_RW="$(/usr/bin/mktemp /tmp/veewee-osx-basesystem-rw.XXXX).dmg"

  msg_status "Creating empty read-write DMG located at $BASE_SYSTEM_DMG_RW.."
  hdiutil create -o "$BASE_SYSTEM_DMG_RW" -size 10g -layout SPUD -fs HFS+J
  hdiutil attach "$BASE_SYSTEM_DMG_RW" -mountpoint "$MNT_BASE_SYSTEM" -nobrowse -owners on

  msg_status "Restoring ('asr restore') the BaseSystem to the read-write DMG.."
  # This asr restore was needed as of 10.11 DP7 and up. See
  # https://github.com/timsutton/osx-vm-templates/issues/40
  #
  # Note that when the restore completes, the volume is automatically re-mounted
  # and not with the '-nobrowse' option. It's an annoyance we could possibly fix
  # in the future..
  asr restore --source "$BASE_SYSTEM_DMG" --target "$MNT_BASE_SYSTEM" --noprompt --noverify --erase
  rm -r "$MNT_BASE_SYSTEM"

  MNT_BASE_SYSTEM="/Volumes/OS X Base System"
  BASESYSTEM_OUTPUT_IMAGE="$OUTPUT_ISO"
  PACKAGES_DIR="$MNT_BASE_SYSTEM/System/Installation/Packages"

  rm "$PACKAGES_DIR"
  msg_status "Moving 'Packages' directory from the ESD to BaseSystem.."
  sudo mv -v "$MNT_ESD/Packages" "$MNT_BASE_SYSTEM/System/Installation/"

  # This isn't strictly required for Mavericks, but Yosemite will consider the
  # installer corrupt if this isn't included, because it cannot verify BaseSystem's
  # consistency and perform a recovery partition verification
  msg_status "Copying in original BaseSystem dmg and chunklist.."
  sudo rsync -ia "$MNT_ESD/BaseSystem.dmg" "$MNT_BASE_SYSTEM/"
  sudo rsync -ia "$MNT_ESD/BaseSystem.chunklist" "$MNT_BASE_SYSTEM/"

  msg_status "Adding automated components.."
  CDROM_LOCAL="$MNT_BASE_SYSTEM/private/etc/rc.cdrom.local"
  echo 'diskutil eraseDisk jhfs+ "Macintosh HD" GPTFormat disk0' > "$CDROM_LOCAL"
  chmod a+x "$CDROM_LOCAL"
  mkdir "$PACKAGES_DIR/Extras"
  sudo rsync -ia "$SUPPORT_DIR/minstallconfig.xml" "$PACKAGES_DIR/Extras/"
  sudo rsync -ia "$SUPPORT_DIR/OSInstall.collection" "$PACKAGES_DIR/"
  sudo rsync -ia "$BUILT_PKG" "$PACKAGES_DIR/"
  rm -rf "$SUPPORT_DIR/tmp"

  msg_status "Unmounting BaseSystem.."
  hdiutil detach "$MNT_BASE_SYSTEM"

  msg_status "Unmounting ESD.."
  hdiutil detach "$MNT_ESD"

  msg_status "On Mavericks and later, the entire modified BaseSystem is our output dmg."
  hdiutil convert -format UDTO -o "$OUTPUT_ISO" "$BASE_SYSTEM_DMG_RW"
  mv "$OUTPUT_ISO.cdr" "$OUTPUT_ISO"
  rm -rf "$MNT_ESD" "$SHADOW_FILE"

  msg_status "Done. Built image is located at $OUTPUT_ISO. Add this iso and its checksum to your template."
}

main "$@"
